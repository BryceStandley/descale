@page "/inventory/lookup"
@using global::WMS.Web.Mobile.Services
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject BarcodeScannerService BarcodeScanner

<div class="inventory-lookup-page">
    <div class="lookup-header">
        <div class="search-bar">
            <div class="search-input">
                <span class="oi oi-magnifying-glass"></span>
                <input type="text" placeholder="Search by SKU or name..." @bind="searchTerm" @bind:event="oninput" />
            </div>
            <button class="scan-button" @onclick="ScanBarcode">
                <span class="oi oi-bar-chart"></span>
            </button>
        </div>
    </div>
    
    <div class="lookup-content">
        @if (isLoading)
        {
            <div class="loading-indicator">
                <div class="spinner"></div>
                <p>Searching inventory...</p>
            </div>
        }
        else if (item != null)
        {
            <div class="item-details">
                <div class="item-header">
                    <div class="item-sku">@item.Sku</div>
                    <div class="item-availability @(item.QuantityAvailable > 0 ? "in-stock" : "out-of-stock")">
                        @(item.QuantityAvailable > 0 ? "In Stock" : "Out of Stock")
                    </div>
                </div>
                <div class="item-name">@item.Name</div>
                <div class="item-description">@item.Description</div>
                
                <div class="item-info">
                    <div class="info-group">
                        <div class="info-label">Category:</div>
                        <div class="info-value">@item.Category</div>
                    </div>
                    <div class="info-group">
                        <div class="info-label">Unit of Measure:</div>
                        <div class="info-value">@item.UnitOfMeasure</div>
                    </div>
                </div>
                
                <div class="stock-info">
                    <div class="stock-card">
                        <div class="stock-label">On Hand</div>
                        <div class="stock-value">@item.QuantityOnHand</div>
                    </div>
                    <div class="stock-card">
                        <div class="stock-label">Allocated</div>
                        <div class="stock-value">@item.QuantityAllocated</div>
                    </div>
                    <div class="stock-card">
                        <div class="stock-label">Available</div>
                        <div class="stock-value">@item.QuantityAvailable</div>
                    </div>
                </div>
                
                <div class="location-info">
                    <h4>Storage Locations</h4>
                    @if (itemLocations != null && itemLocations.Any())
                    {
                        <div class="location-list">
                            @foreach (var location in itemLocations)
                            {
                                <div class="location-card">
                                    <div class="location-code">@location.LocationCode</div>
                                    <div class="location-quantity">@location.Quantity</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-locations">
                            <p>No storage locations found for this item.</p>
                        </div>
                    }
                </div>
            </div>
        }
        else if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <div class="search-results">
                @if (searchResults != null && searchResults.Any())
                {
                    <div class="results-count">Found @searchResults.Count() item(s)</div>
                    <div class="results-list">
                        @foreach (var result in searchResults)
                        {
                            <div class="result-item" @onclick="() => LoadItemDetails(result.Id)">
                                <div class="result-sku">@result.Sku</div>
                                <div class="result-name">@result.Name</div>
                                <div class="result-availability @(result.QuantityAvailable > 0 ? "in-stock" : "out-of-stock")">
                                    @(result.QuantityAvailable > 0 ? "In Stock" : "Out of Stock")
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-results">
                        <span class="oi oi-warning"></span>
                        <p>No inventory items found matching "@searchTerm".</p>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="lookup-instructions">
                <div class="instructions-icon">
                    <span class="oi oi-magnifying-glass"></span>
                </div>
                <div class="instructions-text">
                    <p>Search for an item by entering a SKU, scanning a barcode, or searching by name.</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isLoading = false;
    private string searchTerm = "";
    private Timer searchTimer;
    
    private InventoryItemDto item;
    private IEnumerable<InventoryItemDto> searchResults;
    private IEnumerable<LocationStockDto> itemLocations;
    
    protected override void OnInitialized()
    {
        BarcodeScanner.BarcodeScanned += OnBarcodeScanned;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(searchTerm))
        {
            await SearchItems();
        }
    }
    
    private void OnSearchTermChanged(string value)
    {
        searchTimer?.Dispose();
        
        if (string.IsNullOrWhiteSpace(value))
        {
            ClearSearchResults();
            return;
        }
        
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await SearchItems();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }
    
    private async Task SearchItems()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return;
            
        isLoading = true;
        item = null;
        searchResults = null;
        
        try
        {
            // Try to search via API
            try
            {
                var response = await HttpClient.GetAsync($"api/inventoryitems?searchTerm={Uri.EscapeDataString(searchTerm)}");
                if (response.IsSuccessStatusCode)
                {
                    searchResults = await response.Content.ReadFromJsonAsync<IEnumerable<InventoryItemDto>>();
                    
                    // If only one result, load its details
                    if (searchResults.Count() == 1)
                    {
                        await LoadItemDetails(searchResults.First().Id);
                    }
                }
            }
            catch
            {
                // If API fails, search in local storage
                var localItems = await LocalStorage.GetItemAsync<List<InventoryItemDto>>("inventoryItems");
                if (localItems != null)
                {
                    searchResults = localItems.Where(i => 
                        i.Sku.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        i.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
                        
                    // If only one result, load its details
                    if (searchResults.Count() == 1)
                    {
                        await LoadItemDetails(searchResults.First().Id);
                    }
                }
                else
                {
                    // Create sample data for demo
                    searchResults = CreateSampleItems().Where(i => 
                        i.Sku.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        i.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
                        
                    // If only one result, create sample details
                    if (searchResults.Count() == 1)
                    {
                        item = searchResults.First();
                        itemLocations = CreateSampleLocationStock(item.Id);
                    }
                    
                    // Save to local storage for future use
                    await LocalStorage.SetItemAsync("inventoryItems", CreateSampleItems());
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error searching items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadItemDetails(Guid itemId)
    {
        isLoading = true;
        
        try
        {
            // Try to load from API
            try
            {
                var response = await HttpClient.GetAsync($"api/inventoryitems/{itemId}");
                if (response.IsSuccessStatusCode)
                {
                    item = await response.Content.ReadFromJsonAsync<InventoryItemDto>();
                    
                    // Load locations
                    var locationsResponse = await HttpClient.GetAsync($"api/inventoryitems/{itemId}/locations");
                    if (locationsResponse.IsSuccessStatusCode)
                    {
                        itemLocations = await locationsResponse.Content.ReadFromJsonAsync<IEnumerable<LocationStockDto>>();
                    }
                }
            }
            catch
            {
                // If API fails, try to load from local storage or create sample data
                var localItems = await LocalStorage.GetItemAsync<List<InventoryItemDto>>("inventoryItems");
                if (localItems != null)
                {
                    item = localItems.FirstOrDefault(i => i.Id == itemId);
                }
                
                if (item == null)
                {
                    // Create sample data
                    var sampleItems = CreateSampleItems();
                    item = sampleItems.FirstOrDefault(i => i.Id == itemId);
                    
                    if (item != null)
                    {
                        await LocalStorage.SetItemAsync("inventoryItems", sampleItems);
                    }
                }
                
                if (item != null)
                {
                    itemLocations = CreateSampleLocationStock(itemId);
                }
            }
            
            searchResults = null; // Clear search results when showing details
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading item details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ClearSearchResults()
    {
        searchResults = null;
        item = null;
    }
    
    private async Task ScanBarcode()
    {
        await BarcodeScanner.StartScanningAsync();
    }
    
    private void OnBarcodeScanned(string barcode)
    {
        searchTerm = barcode;
        InvokeAsync(async () => {
            await SearchItems();
            StateHasChanged();
        });
    }
    
    private List<InventoryItemDto> CreateSampleItems()
    {
        return new List<InventoryItemDto>
        {
            new InventoryItemDto
            {
                Id = Guid.NewGuid(),
                Sku = "SKU-001",
                Name = "Test Product 1",
                Description = "This is a test product for demonstration purposes.",
                Category = "Category A",
                UnitOfMeasure = "EACH",
                QuantityOnHand = 100,
                QuantityAllocated = 20,
                QuantityAvailable = 80
            },
            new InventoryItemDto
            {
                Id = Guid.NewGuid(),
                Sku = "SKU-002",
                Name = "Test Product 2",
                Description = "Another test product with a longer description to show how text wrapping works.",
                Category = "Category B",
                UnitOfMeasure = "CASE",
                QuantityOnHand = 50,
                QuantityAllocated = 50,
                QuantityAvailable = 0
            },
            new InventoryItemDto
            {
                Id = Guid.NewGuid(),
                Sku = "SKU-003",
                Name = "Test Product 3",
                Description = "A third test product to show in the inventory lookup demo.",
                Category = "Category A",
                UnitOfMeasure = "EACH",
                QuantityOnHand = 25,
                QuantityAllocated = 10,
                QuantityAvailable = 15
            }
        };
    }
    
    private List<LocationStockDto> CreateSampleLocationStock(Guid itemId)
    {
        return new List<LocationStockDto>
        {
            new LocationStockDto
            {
                Id = Guid.NewGuid(),
                ItemId = itemId,
                LocationId = Guid.NewGuid(),
                LocationCode = "A-01-B-1",
                Quantity = 50
            },
            new LocationStockDto
            {
                Id = Guid.NewGuid(),
                ItemId = itemId,
                LocationId = Guid.NewGuid(),
                LocationCode = "B-03-C-2",
                Quantity = 25
            },
            new LocationStockDto
            {
                Id = Guid.NewGuid(),
                ItemId = itemId,
                LocationId = Guid.NewGuid(),
                LocationCode = "C-05-A-3",
                Quantity = 25
            }
        };
    }
    
    public void Dispose()
    {
        searchTimer?.Dispose();
        BarcodeScanner.BarcodeScanned -= OnBarcodeScanned;
    }
    
    private class InventoryItemDto
    {
        public Guid Id { get; set; }
        public string Sku { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public string UnitOfMeasure { get; set; }
        public int QuantityOnHand { get; set; }
        public int QuantityAllocated { get; set; }
        public int QuantityAvailable { get; set; }
    }
    
    private class LocationStockDto
    {
        public Guid Id { get; set; }
        public Guid ItemId { get; set; }
        public Guid LocationId { get; set; }
        public string LocationCode { get; set; }
        public int Quantity { get; set; }
    }
}