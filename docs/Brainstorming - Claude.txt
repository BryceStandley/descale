Warehouse Management System Approach
This is an exciting project! Building a lightweight warehouse management system with modern .NET is definitely achievable. Here's my recommended approach:
Architecture Overview
I'd suggest using a microservices-based architecture to separate concerns and allow independent scaling:

Backend API Layer - .NET 8 Web API
Web Frontend - Blazor (either Server or WebAssembly)
Mobile Solution - Either Xamarin.Forms/MAUI or a PWA

Backend Development
For your .NET backend:

Use .NET 8 for the latest performance improvements
Create a RESTful API using ASP.NET Core Web API
Implement Domain-Driven Design principles for complex warehouse operations
Use Entity Framework Core for data access
Consider implementing CQRS pattern for separating read/write operations

Database

SQL Server or PostgreSQL for relational data
Consider MongoDB for document-based storage if needed
Implement proper caching strategies with Redis

Frontend Web Interface
For your main web interface:

Blazor WebAssembly for rich client-side functionality
Component-based architecture for reusability
Modern CSS framework like Tailwind CSS for responsive design

Mobile Solution
For warehouse floor operations, I'd recommend:
Option 1: Native App

.NET MAUI (evolution of Xamarin.Forms) to build once for Android
Leverage device capabilities (camera for barcode scanning, etc.)
Offline capabilities for spotty warehouse connectivity

Option 2: Progressive Web App (PWA)

Mobile-optimized web interface using responsive Blazor
Service workers for offline functionality
Streamlined UI designed specifically for scanner devices

Given your mention of Zebra Android scanners, having a simplified web interface might be the most practical approach, as it requires no installation and is easier to update.
Core Features to Consider

Inventory management
Receiving/putaway processes
Picking/packing operations
Shipping management
Reporting and analytics